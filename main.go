package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/valyala/fasttemplate"
)

func main() {
	args := os.Args[1:]
	if len(args) != 1 {
		panic("fn expected")
	}
	fn := args[0]

	ext := filepath.Ext(fn)
	if ext != ".go" {
		panic("*.go file expected")
	}

	fnWOExt := fn[0 : len(fn)-len(ext)]
	fnOut := fnWOExt + "_logs.go"
	fmt.Println(fnOut)

	data, err := ioutil.ReadFile(fn)
	if err != nil {
		panic(err)
	}

	src, dest := string(data), ""

	hTmp := fasttemplate.New(headerTemplate, "{{", "}}")
	sTmp := fasttemplate.New(structLoggerTemplate, "{{", "}}")

	hasPkg := false
	wasLoggerTag := false

	scanner := bufio.NewScanner(strings.NewReader(src))
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "package") {
			if hasPkg {
				panic("multiple package declaration")
			}

			hasPkg = true
			pkgName := strings.TrimLeft(line, "package ") //TODO check
			dest += hTmp.ExecuteString(map[string]interface{}{
				"package": pkgName,
			})

			continue
		}

		if wasLoggerTag {
			if !strings.Contains(line, "type") || !strings.Contains(line, "struct") {
				panic("logger tag should be followed by struct declaration")
			}

			i1 := len("type ")
			i2 := strings.Index(line[i1:], " ")
			structName := line[i1:i2]

			dest += "\n" + sTmp.ExecuteString(map[string]interface{}{
				"structName": strings.ToLower(structName),
				"StructName": structName,
			})

			wasLoggerTag = false
		}

		if strings.HasPrefix(line, "// struct-logs-gen:gen") {
			if wasLoggerTag {
				panic("multiple logger tags")
			}
			wasLoggerTag = true
		}
	}

	err = ioutil.WriteFile(fnOut, []byte(dest), 0644)
	if err != nil {
		panic(err)
	}
}

const (
	headerTemplate = `
		// Code generated by struct-logs-gen. DO NOT EDIT.
		package {{package}}

		import (
			"github.com/studtool/common/logs"
		)
	`

	structLoggerTemplate = `
		var {{structName}}Logger = &logs.StructLogger{}

		func (_ *{{StructName}}) GetStructLogger() logs.Logger {
			return {{structName}}Logger
		}
	`
)
